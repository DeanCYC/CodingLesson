玩轉Linux操作系統

操作系統發展史
只有硬件沒有軟件的計算機系統被稱之為“裸機”，我們很難用“裸機”來完成計算機日常的工作（如存儲和運算），所以必須用特定的軟件來控制硬件的工作。最靠近計算機硬件的軟件是系統軟件，其中最為重要的就是“操作系統”。 “操作系統”是控制和管理整個計算機硬件和軟件資源、實現資源分配和任務調配、為系統用戶以及其他軟件提供接口和環境的程序的集合。

沒有操作系統（手工操作）
在計算機誕生之初沒有操作系統的年代，人們先把程序紙帶（或卡片）裝上計算機，然後啟動輸入機把程序送入計算機，接著通過控制台開關啟動程序運行。當程序執行完畢，打印機輸出計算的結果，用戶卸下並取走紙帶（或卡片）。第二個用戶上機，重複同樣的步驟。在整個過程中用戶獨占機器，CPU等待手工操作，資源利用率極低。

批處理系統
首先啟動計算機上的一個監督程序，在監督程序的控制下，計算機能夠自動的、成批的處理一個或多個用戶的作業。完成一批作業後，監督程度又從輸入機讀取作業存入磁帶機。按照上面的步驟重複處理任務。監督程序不停的處理各個作業，實現了作業的自動轉接，減少了作業的建立時間和手工操作時間，提高了計算機資源的利用率。批處理系統又可以分為單道批處理系統、多道批處理系統、聯機批處理系統、脫機批處理系統。

分時系統和實時系統
分時系統是把處理器的運行時間分成很短的時間片，按時間片輪流把處理機分配給各聯機作業使用。若某個作業在分配給它的時間片內不能完成其計算，則該作業暫時中斷，把處理機讓給另一作業使用，等待下一輪調度時再繼續其運行。由於計算機速度很快，作業運行輪轉得很快，給每個用戶的感覺是他獨占了一台計算機。而每個用戶可以通過自己的終端向系統發出各種操作控制命令，在充分的人機交互情況下，完成作業的運行。為了解決分時系統不能及時響應用戶指令的情況，又出現了能夠在在嚴格的時間範圍內完成事件處理，及時響應隨機外部事件的實時系統。

通用操作系統
    1.1960s：IBM的System/360系列的機器有了統一的操作系統OS/360。

    2.1965年：AT&T的貝爾實驗室加入GE和MIT的合作計劃開始開發MULTICS。

    3.1969年：MULTICS項目失敗，Ken Tompson賦閒在家，為了玩“Space Travel”遊戲用彙編語言在當時已經被淘汰的PDP-7上開發了Unics。

    4.1970年~1971年：Ken Tompson和Dennis Ritchie用B語言在PDP-11上重寫了Unics，並在Brian Kernighan的建議下將其更名為Unix。

    5.1972年~1973年：Dennis Ritchie發明了C語言來取代可移植性較差的B語言，並開啟了用C語言重寫Unix的工作。

    6.1974年：Unix推出了里程碑意義的第5版，幾乎完全用C語言來實現。

    7.1979年：從Unix第7版開始，AT&T發布新的使用條款，將Unix私有化。

    8.1987年：Andrew S. Tanenbaum教授為了能在課堂上為學生講解操作系統運作的細節，決定在不使用任何AT&T的源代碼前提下，自行開發與Unix兼容的操作系統以避免版權上的爭議，該系統被命名為Minix。

    9.1991年：Linus Torvalds就讀於芬蘭赫爾辛基大學期間，嘗試在Minix上做一些開發工作，但因為Minix只是作為教學用途的操作系統，功能並不強大，為了方便在學校的新聞組和郵件系統中讀寫和下載文件，Linus編寫了磁盤驅動程序和文件系統，這些東西形成了Linux系統內核的雛形。