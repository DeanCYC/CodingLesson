接入三方平台
在Web應用的開發過程中，有一些任務並不是我們自己能夠完成的。例如，我們的Web項目中需要做個人或企業的實名認證，很顯然我們並沒有能力判斷用戶提供的認證信息的真實性，這個時候我們就要藉助三方平台提供的服務來完成該項操作。再比如說，我們的項目中需要提供在線支付功能，這類業務通常也是藉助支付網關來完成而不是自己去實現，我們只需要接入像微信、支付寶、銀聯這樣的三方平台即可。

在項目中接入三方平台基本上就兩種方式：API接入和SDK接入。
    1.API接入指的是通過訪問三方提供的URL來完成操作或獲取數據。國內有很多這樣的平台提供了大量常用的服務，例如聚合數據上提供了生活服務類、金融科技類、交通地理類、充值繳費類等各種類型的API。我們可以通過Python程序發起網絡請求，通過訪問URL獲取數據，這些API接口跟我們項目中提供的數據接口是一樣的，只不過我們項目中的API是供自己使用的，而這類三方平台提供的API是開放的。當然開放並不代表免費，大多數能夠提供有商業價值的數據的API都是需要付費才能使用的。
    2.SDK接入指的是通過安裝三方庫並使用三方庫封裝的類、函數來使用三方平台提供的服務的方式。例如我們剛才說到的接入支付寶，就需要先安裝支付寶的SDK，然後通過支付寶封裝的類和方法完成對支付服務的調用。

下面我們通過具體的例子來講解如何接入三方平台。

接入短信網關
一個Web項目有很多地方都可以用到短信服務，例如：手機驗證碼登錄、重要消息提醒、產品營銷短信等。要實現發送短信的功能，可以通過接入短信網關來實現，國內比較有名的短信網關包括：雲片短信、網易云信、螺絲帽、SendCloud等，這些短信網關一般都提供了免費試用功能。下面我們以螺絲帽平台為例，講解如何在項目中接入短信網關，其他平台操作基本類似。
    1.註冊賬號，新用戶可以免費試用。
    2.登錄到管理後台，進入短信版塊。
    3.點擊“觸發發送”可以找到自己專屬的API Key（身份標識）。
    4.點擊“簽名管理”可以添加短信簽名，短信都必須攜帶簽名，免費試用的短信要在短信中添加“【鐵殼測試】”這個簽名，否則短信無法發送。
    5.點擊“IP白名單”將運行Django項目的服務器地址（公網IP地址，本地運行可以打開xxx網站查看自己本機的公網IP地址）填寫到白名單中，否則短信無法發送。
    6.如果沒有剩餘的短信條數，可以到“充值”頁面選擇“短信服務”進行充值。

接下來，我們可以通過調用螺絲帽短信網關實現發送短信驗證碼的功能，代碼如下所示。
    def send_mobile_code(tel, code):
        """發送短信驗證碼"""
        resp = requests.post(
            url='http://sms-api.luosimao.com/v1/send.json',
            auth=('api', 'key-自己的APIKey'),
            data={
                'mobile': tel,
                'message': f'您的短信驗證碼是{code}，打死也不能告訴別人喲。 【Python小課】'
            },
            verify=False
        )
        return resp.json()

運行上面的代碼需要先安裝requests三方庫，這個三方庫封裝了HTTP網絡請求的相關功能，使用起來非常的簡單，我們在之前的內容中也講到過這個三方庫。 send_mobile_code函數有兩個參數，第一個參數是手機號，第二個參數是短信驗證碼的內容，第5行代碼需要提供自己的API Key，就是上面第2步中查看到的自己的API Key。請求螺絲帽的短信網關會返回JSON格式的數據，對於上面的代碼如果返回{'err': 0, 'msg': 'ok'}，則表示短信發送成功，如果err字段的值不為0而是其他值，則表示短信發送失敗，可以在螺絲帽官方的開發文檔頁面上查看到不同的數值代表的含義，例如：-20表示余額不足，-32表示缺少短信簽名。

可以在視圖函數中調用上面的函數來完成發送短信驗證碼的功能，稍後我們可以把這個功能跟用戶註冊結合起來。

生成隨機驗證碼和驗證手機號的函數。
    import random
    import re

    TEL_PATTERN = re.compile(r'1[3-9]\d{9}')


    def check_tel(tel):
        """檢查手機號"""
        return TEL_PATTERN.fullmatch(tel) is not None


    def random_code(length=6):
        """生成隨機短信驗證碼"""
        return ''.join(random.choices('0123456789', k=length))

發送短信驗證碼的視圖函數。
    @api_view(('GET', ))
    def get_mobilecode(request, tel):
        """獲取短信驗證碼"""
        if check_tel(tel):
            redis_cli = get_redis_connection()
            if redis_cli.exists(f'vote:block-mobile:{tel}'):
                data = {'code': 30001, 'message': '請不要在60秒內重複發送短信驗證碼'}
            else:
                code = random_code()
                send_mobile_code(tel, code)
                # 通過Redis阻止60秒內容重複發送短信驗證碼
                redis_cli.set(f'vote:block-mobile:{tel}', 'x', ex=60)
                # 將驗證碼在Redis中保留10分鐘（有效期10分鐘）
                redis_cli.set(f'vote2:valid-mobile:{tel}', code, ex=600)
                data = {'code': 30000, 'message': '短信驗證碼已發送，請注意查收'}
        else:
            data = {'code': 30002, 'message': '請輸入有效的手機號'}
        return Response(data)

說明：上面的代碼利用Redis實現了兩個額外的功能，一個是阻止用戶60秒內重複發送短信驗證碼，一個是將用戶的短信驗證碼保留10分鐘，也就是說這個短信驗證碼的有效期只有10分鐘，我們可以要求用戶在註冊時提供該驗證碼來驗證用戶手機號的真實性。