文本處理
    1.字符流編輯器 - sed。
    sed是操作、過濾和轉換文本內容的工具。假設有一個名為fruit.txt的文件，內容如下所示。
    [root ~]# cat -n fruit.txt 
        1  banana
        2  grape
        3  apple
        4  watermelon
        5  orange

    接下來，我們在第2行後面添加一個pitaya。

    [root ~]# sed '2a pitaya' fruit.txt 
    banana
    grape
    pitaya
    apple
    watermelon
    orange
    #注意：剛才的命令和之前我們講過的很多命令一樣並沒有改變fruit.txt文件，而是將添加了新行的內容輸出到終端中，如果想保存到fruit.txt中，可以使用輸出重定向操作。

    在第2行前面插入一個waxberry。
    [root ~]# sed '2i waxberry' fruit.txt
    banana
    waxberry
    grape
    apple
    watermelon
    orange

    刪除第3行。
    [root ~]# sed '3d' fruit.txt
    banana
    grape
    watermelon
    orange

    刪除第2行到第4行。
    [root ~]# sed '2,4d' fruit.txt
    banana
    orange
    
    將文本中的字符a替換為@。
    [root ~]# sed 's#a#@#' fruit.txt 
    b@nana
    gr@pe
    @pple
    w@termelon
    or@nge

    將文本中的字符a替換為@，使用全局模式。
    [root ~]# sed 's#a#@#g' fruit.txt 
    b@n@n@
    gr@pe
    @pple
    w@termelon
    or@nge

    2.模式匹配和處理語言 - awk。

    awk是一種編程語言，也是Linux系統中處理文本最為強大的工具，它的作者之一和現在的維護者就是之前提到過的Brian Kernighan（ken和dmr最親密的伙伴）。通過該命令可以從文本中提取出指定的列、用正則表達式從文本中取出我們想要的內容、顯示指定的行以及進行統計和運算，總之它非常強大。
    假設有一個名為fruit2.txt的文件，內容如下所示。
    [root ~]# cat fruit2.txt 
    1       banana      120
    2       grape       500
    3       apple       1230
    4       watermelon  80
    5       orange      400

    顯示文件的第3行。
    [root ~]# awk 'NR==3' fruit2.txt 
    3       apple       1230

    顯示文件的第2列。   
    [root ~]# awk '{print $2}' fruit2.txt 
    banana
    grape
    apple
    watermelon
    orange
   
    顯示文件的最後一列。
    [root ~]# awk '{print $NF}' fruit2.txt 
    120
    500
    1230
    80
    400

    輸出末尾數字大於等於300的行。
    [root ~]# awk '{if($3 >= 300) {print $0}}' fruit2.txt 
    2       grape       500
    3       apple       1230
    5       orange      400

    上面展示的只是awk命令的冰山一角，更多的內容留給讀者自己在實踐中去探索。