RESTful架構和DRF進階
除了上一節講到的方法，使用DRF創建REST風格的數據接口也可以通過CBV（基於類的視圖）的方式。使用CBV創建數據接口的特點是代碼簡單，開發效率高，但是沒有FBV（基於函數的視圖）靈活，因為使用FBV的方式，數據接口對應的視圖函數執行什麼樣的代碼以及返回什麼的數據是高度可定制的。下面我們以定制學科的數據接口為例，講解通過CBV方式定制數據接口的具體做法。

使用CBV
繼承APIView的子類
修改之前項目中的polls/views.py，去掉show_subjects視圖函數，添加一個名為SubjectView的類，該類繼承自ListAPIView，ListAPIView能接收GET請求，它封裝了獲取數據列表並返回JSON數據的get方法。 ListAPIView是APIView 的子類，APIView還有很多的子類，例如CreateAPIView可以支持POST請求，UpdateAPIView可以支持PUT和PATCH請求，DestoryAPIView可以支持DELETE請求。 SubjectView 的代碼如下所示。
    from rest_framework.generics import ListAPIView


    class SubjectView(ListAPIView):
        # 通過queryset指定如何獲取學科數據
        queryset = Subject.objects.all()
        # 通過serializer_class指定如何序列化學科數據
        serializer_class = SubjectSerializer

剛才說過，由於SubjectView的父類ListAPIView已經實現了get方法來處理獲取學科列表的GET請求，所以我們只需要聲明如何獲取學科數據以及如何序列化學科數據，前者用queryset屬性指定，後者用serializer_class屬性指定。要使用上面的SubjectView，需要修改urls.py文件，如下所示。
    urlpatterns = [
        path('api/subjects/', SubjectView.as_view()),   
    ]

很顯然，上面的做法較之之前講到的FBV要簡單很多。

繼承ModelViewSet
如果學科對應的數據接口需要支持GET、POST、PUT、PATCH、DELETE請求來支持對學科資源的獲取、新增、更新、刪除操作，更為簡單的做法是繼承ModelViewSet來編寫學科視圖類。再次修改polls/views.py文件，去掉SubjectView類，添加一個名為SubjectViewSet的類，代碼如下所示。
    from rest_framework.viewsets import ModelViewSet


    class SubjectViewSet(ModelViewSet):
        queryset = Subject.objects.all()
        serializer_class = SubjectSerializer

通過查看ModelViewSet類的源代碼可以發現，該類共有6個父類，其中前5個父類分別實現對POST（新增學科）、GET（獲取指定學科）、PUT/PATCH（更新學科）、DELETE（刪除學科）和GET（獲取學科列表）操作的支持，對應的方法分別是create、retrieve、update、destroy和list。由於ModelViewSet的父類中已經實現了這些方法，所以我們幾乎沒有編寫任何代碼就完成了學科數據全套接口的開發，我們要做的僅僅是指出如何獲取到數據（通過queryset屬性指定）以及如何序列化數據（通過serializer_class屬性指定），這一點跟上面繼承APIView的子類做法是一致的。
    class ModelViewSet(mixins.CreateModelMixin,
                    mixins.RetrieveModelMixin,
                    mixins.UpdateModelMixin,
                    mixins.DestroyModelMixin,
                    mixins.ListModelMixin,
                    GenericViewSet):
        """
        A viewset that provides default `create()`, `retrieve()`, `update()`,
        `partial_update()`, `destroy()` and `list()` actions.
        """
        pass

要使用上面的SubjectViewSet，需要在urls.py文件中進行URL映射。由於ModelViewSet相當於是多個視圖函數的匯總，所以不同於之前映射URL的方式，我們需要先創建一個路由器並通過它註冊SubjectViewSet，然後將註冊成功後生成的URL一併添加到urlspattern列表中，代碼如下所示。
    from rest_framework.routers import DefaultRouter

    router = DefaultRouter()
    router.register('api/subjects', SubjectViewSet)
    urlpatterns += router.urls
    
除了ModelViewSet類外，DRF還提供了一個名為ReadOnlyModelViewSet 的類，從名字上就可以看出，該類是只讀視圖的集合，也就意味著，繼承該類定制的數據接口只能支持GET請求，也就是獲取單個資源和資源列表的請求。