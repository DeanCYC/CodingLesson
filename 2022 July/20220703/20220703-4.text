窗口函數
MySQL 從8.0開始支持窗口函數，大多數商業數據庫和一些開源數據庫早已提供了對窗口函數的支持，有的也將其稱之為 OLAP（聯機分析和處理）函數，聽名字就知道跟統計和分析相關。為了幫助大家理解窗口函數，我們先說說窗口的概念。

窗口可以理解為記錄的集合，窗口函數也就是在滿足某種條件的記錄集合上執行的特殊函數，對於每條記錄都要在此窗口內執行函數。窗口函數和我們上面講到的聚合函數比較容易混淆，二者的區別主要在於聚合函數是將多條記錄聚合為一條記錄，窗口函數是每條記錄都會執行，執行後記錄條數不會變。窗口函數不僅僅是幾個函數，它是一套完整的語法，函數只是該語法的一部分，基本語法如下所示：
    <窗口函數> over (partition by <用於分組的列名> order by <用戶排序的列名>)

上面語法中，窗口函數的位置可以放以下兩種函數：
    1.專用窗口函數，包括：lead、lag、first_value、last_value、rank、dense_rank和row_number等。
    2.聚合函數，包括：sum、avg、max、min和count等。

下面為大家舉幾個使用窗口函數的簡單例子，我們先用如下所示的 SQL 建庫建表。
    -- 創建名為hrs的數據庫並指定默認的字符集
    create database `hrs` default charset utf8mb4;

    -- 切換到hrs數據庫
    use `hrs`;

    -- 創建部門表
    create table `tb_dept`
    (
    `dno` int not null comment '編號',
    `dname` varchar(10) not null comment '名稱',
    `dloc` varchar(20) not null comment '所在地',
    primary key (`dno`)
    );

    -- 插入4個部門
    insert into `tb_dept` values 
        (10, '會計部', '北京'),
        (20, '研發部', '成都'),
        (30, '銷售部', '重慶'),
        (40, '運維部', '深圳');

    -- 創建員工表
    create table `tb_emp`
    (
    `eno` int not null comment '員工編號',
    `ename` varchar(20) not null comment '員工姓名',
    `job` varchar(20) not null comment '員工職位',
    `mgr` int comment '主管編號',
    `sal` int not null comment '員工月薪',
    `comm` int comment '每月補貼',
    `dno` int not null comment '所在部門編號',
    primary key (`eno`),
    constraint `fk_emp_mgr` foreign key (`mgr`) references tb_emp (`eno`),
    constraint `fk_emp_dno` foreign key (`dno`) references tb_dept (`dno`)
    );

    -- 插入14個員工
    insert into `tb_emp` values 
        (7800, '張三豐', '總裁', null, 9000, 1200, 20),
        (2056, '喬峰', '分析師', 7800, 5000, 1500, 20),
        (3088, '李莫愁', '設計師', 2056, 3500, 800, 20),
        (3211, '張無忌', '程序員', 2056, 3200, null, 20),
        (3233, '丘處機', '程序員', 2056, 3400, null, 20),
        (3251, '張翠山', '程序員', 2056, 4000, null, 20),
        (5566, '宋遠橋', '會計師', 7800, 4000, 1000, 10),
        (5234, '郭靖', '出納', 5566, 2000, null, 10),
        (3344, '黃蓉', '銷售主管', 7800, 3000, 800, 30),
        (1359, '胡一刀', '銷售員', 3344, 1800, 200, 30),
        (4466, '苗人鳳', '銷售員', 3344, 2500, null, 30),
        (3244, '歐陽鋒', '程序員', 3088, 3200, null, 20),
        (3577, '楊過', '會計', 5566, 2200, null, 10),
        (3588, '朱九真', '會計', 5566, 2500, null, 10);

例子1：查詢按月薪從高到低排在第4到第6名的員工的姓名和月薪。
    select * from (
        select 
            `ename`, `sal`,
            row_number() over (order by `sal` desc) as `rank`
        from `tb_emp`
    ) `temp` where `rank` between 4 and 6;
#說明：上面使用的函數row_number()可以為每條記錄生成一個行號，在實際工作中可以根據需要將其替換為rank()或dense_rank()函數，三者的區別可以參考官方文檔或閱讀《通俗易懂的學會：SQL窗口函數》進行了解。在MySQL 8以前的版本，我們可以通過下面的方式來完成類似的操作。

    select `rank`, `ename`, `sal` from (
        select @a:=@a+1 as `rank`, `ename`, `sal` 
        from `tb_emp`, (select @a:=0) as t1 order by `sal` desc
    ) t2 where `rank` between 4 and 6;

例子2：查詢每個部門月薪最高的兩名的員工的姓名和部門名稱。
    select `ename`, `sal`, `dname` 
    from (
        select 
            `ename`, `sal`, `dno`,
            rank() over (partition by `dno` order by `sal` desc) as `rank`
        from `tb_emp`
    ) as `temp` natural join `tb_dept` where `rank`<=2;
#說明：在MySQL 8以前的版本，我們可以通過下面的方式來完成類似的操作。

    select `ename`, `sal`, `dname` from `tb_emp` as `t1` 

    natural join tb_dept where ( select count(*) from tb_emp as t2 where t1.dno=t2.dno and t2.sal>t1.sal )<2 order by dno asc, sal desc;