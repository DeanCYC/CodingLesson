進入Python交互式環境，使用redis三方庫來操作Redis。
    >>> import redis
    >>>
    >>> client = redis.Redis(host='127.0.0.1', port=6379, password='yourpass')
    >>>
    >>> client.set('username', 'admin')
    True
    >>> client.hset('student', 'name', 'luohao')
    1
    >>> client.hset('student', 'age', 40)
    1
    >>> client.keys('*')
    [b'username', b'student']
    >>> client.get('username')
    b'admin'
    >>> client.hgetall('student')
    {b'name': b'luohao', b'age': b'40'}

MongoDB概述

MongoDB簡介
MongoDB是2009年問世的一個面向文檔的數據庫管理系統，由C++語言編寫，旨在為Web應用提供可擴展的高性能數據存儲解決方案。雖然在劃分類別的時候後，MongoDB被認為是NoSQL的產品，但是它更像一個介於關係數據庫和非關係數據庫之間的產品，在非關係數據庫中它功能最豐富，最像關係數據庫。

MongoDB將數據存儲為一個文檔，一個文檔由一系列的“鍵值對”組成，其文檔類似於JSON對象，但是MongoDB對JSON進行了二進制處理（能夠更快的定位key和value），因此其文檔的存儲格式稱為BSON。關於JSON和BSON的差別大家可以看看MongoDB官方網站的文章《JSON and BSON》。

目前，MongoDB已經提供了對Windows、macOS、Linux、Solaris等多個平台的支持，而且也提供了多種開發語言的驅動程序，Python當然是其中之一。

MongoDB的安裝和啟動
可以從MongoDB的官方下載鏈接下載MongoDB，官方提供了Windows、macOS和多種Linux版本的安裝包。下面以CentOS為例，簡單說一下如何安裝和啟動MongoDB。
下載服務器和命令行的RPM安裝包。
    wget https://repo.mongodb.org/yum/redhat/7/mongodb-org/4.4/x86_64/RPMS/mongodb-org-server-4.4.2-1.el7.x86_64.rpm
    rpm -ivh mongodb-org-server-4.4.2-1.el7.x86_64.rpm
    wget https://repo.mongodb.org/yum/redhat/7/mongodb-org/4.4/x86_64/RPMS/mongodb-org-shell-4.4.2-1.el7.x86_64.rpm
    rpm -ivh mongodb-org-shell-4.4.2-1.el7.x86_64.rpm

啟動MongoDB服務器，需要先創建保存數據的文件夾。
    mkdir -p /data/db

修改MongoDB的配置文件，將其中bindIp選項的值修改為本機IP地址而不是默認的127.0.0.1，本機IP地址可以通過ifconfig命令進行查看。
    vim /etc/mongod.conf

使用systemctl命令啟動服務。
    systemctl start mongod

MongoDB基本概念
我們通過與關係型數據庫的比較來說明MongoDB中的一些概念。
    SQL	                    MongoDB
    database	            database
    table（表）	             collection（集合）
    row（行）	             document（文檔）
    column（列）	         field（字段）
    index	                index
    table joins（表連接）	（嵌套文檔）
    primary key	            primary key

通過Shell操作MongoDB
0.啟動命令行工具，進入交互式環境。
    mongo

1.查看、創建和刪除數據庫。
    > // 顯示所有數據庫
    > show dbs
    admin   0.000GB
    config  0.000GB
    local   0.000GB
    > // 創建並切換到school數據庫
    > use school
    switched to db school
    > // 刪除當前數據庫
    > db.dropDatabase()
    { "ok" : 1 }

2.創建、刪除和查看集合。
    > // 創建並切換到school數據庫
    > use school
    switched to db school
    > // 創建colleges集合
    > db.createCollection('colleges')
    { "ok" : 1 }
    > // 創建students集合
    > db.createCollection('students')
    { "ok" : 1 }
    > // 查看所有集合
    > show collections
    colleges
    students
    > // 刪除colleges集合
    > db.colleges.drop()
    true
#說明：在MongoDB中插入文檔時如果集合不存在會自動創建集合，所以也可以按照下面的方式通過插入文檔來創建集合。

3.文檔的CRUD操作。
    > // 向students集合插入文檔
    > db.students.insert({stuid: 1001, name: '駱昊', age: 40})
    WriteResult({ "nInserted" : 1 })
    > // 向students集合插入文檔
    > db.students.save({stuid: 1002, name: '王大錘', tel: '13012345678', gender: '男'})
    WriteResult({ "nInserted" : 1 })
    > // 查看所有文檔
    > db.students.find()
    { "_id" : ObjectId("5b13c72e006ad854460ee70b"), "stuid" : 1001, "name" : "駱昊", "age" : 38 }
    { "_id" : ObjectId("5b13c790006ad854460ee70c"), "stuid" : 1002, "name" : "王大錘", "tel" : "13012345678", "gender" : "男" }
    > // 更新stuid為1001的文檔
    > db.students.update({stuid: 1001}, {'$set': {tel: '13566778899', gender: '男'}})
    WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
    > // 插入或更新stuid為1003的文檔
    > db.students.update({stuid: 1003}, {'$set': {name: '白元芳', tel: '13022223333', gender: '男'}},  upsert=true)
    WriteResult({
            "nMatched" : 0,
            "nUpserted" : 1,
            "nModified" : 0,
            "_id" : ObjectId("5b13c92dd185894d7283efab")
    })
    > // 查詢所有文檔
    > db.students.find().pretty()
    {
            "_id" : ObjectId("5b13c72e006ad854460ee70b"),
            "stuid" : 1001,
            "name" : "駱昊",
            "age" : 38,
            "gender" : "男",
            "tel" : "13566778899"
    }
    {
            "_id" : ObjectId("5b13c790006ad854460ee70c"),
            "stuid" : 1002,
            "name" : "王大錘",
            "tel" : "13012345678",
            "gender" : "男"
    }
    {
            "_id" : ObjectId("5b13c92dd185894d7283efab"),
            "stuid" : 1003,
            "gender" : "男",
            "name" : "白元芳",
            "tel" : "13022223333"
    }
    > // 查詢stuid大於1001的文檔
    > db.students.find({stuid: {'$gt': 1001}}).pretty()
    {
            "_id" : ObjectId("5b13c790006ad854460ee70c"),
            "stuid" : 1002,
            "name" : "王大錘",
            "tel" : "13012345678",
            "gender" : "男"
    }
    {
            "_id" : ObjectId("5b13c92dd185894d7283efab"),
            "stuid" : 1003,
            "gender" : "男",
            "name" : "白元芳",
            "tel" : "13022223333"
    }
    > // 查詢stuid大於1001的文檔只顯示name和tel字段
    > db.students.find({stuid: {'$gt': 1001}}, {_id: 0, name: 1, tel: 1}).pretty()
    { "name" : "王大錘", "tel" : "13012345678" }
    { "name" : "白元芳", "tel" : "13022223333" }
    > // 查詢name為“駱昊”或者tel為“13022223333”的文檔
    > db.students.find({'$or': [{name: '駱昊'}, {tel: '13022223333'}]}, {_id: 0, name: 1, tel: 1}).pretty()
    { "name" : "駱昊", "tel" : "13566778899" }
    { "name" : "白元芳", "tel" : "13022223333" }
    > // 查詢學生文檔跳過第1條文檔只查1條文檔
    > db.students.find().skip(1).limit(1).pretty()
    {
            "_id" : ObjectId("5b13c790006ad854460ee70c"),
            "stuid" : 1002,
            "name" : "王大錘",
            "tel" : "13012345678",
            "gender" : "男"
    }
    > // 對查詢結果進行排序(1表示升序，-1表示降序)
    > db.students.find({}, {_id: 0, stuid: 1, name: 1}).sort({stuid: -1})
    { "stuid" : 1003, "name" : "白元芳" }
    { "stuid" : 1002, "name" : "王大錘" }
    { "stuid" : 1001, "name" : "駱昊" }
    > // 在指定的一個或多個字段上創建索引
    > db.students.ensureIndex({name: 1})
    {
            "createdCollectionAutomatically" : false,
            "numIndexesBefore" : 1,
            "numIndexesAfter" : 2,
            "ok" : 1
    }

使用MongoDB可以非常方便的配置數據複製，通過冗餘數據來實現數據的高可用以及災難恢復，也可以通過數據分片來應對數據量迅速增長的需求。關於MongoDB更多的操作可以查閱官方文檔 ，同時推薦大家閱讀Kristina Chodorow寫的《MongoDB權威指南》。

在Python程序中操作MongoDB
可以通過pip安裝pymongo來實現對MongoDB的操作。
    pip install pymongo

進入Python交互式環境，就可以執行以下的操作。
    >>> from pymongo import MongoClient
    >>>
    >>> client = MongoClient('mongodb://127.0.0.1:27017') 
    >>> db = client.school
    >>> for student in db.students.find():
    ...     print('學號:', student['stuid'])
    ...     print('姓名:', student['name'])
    ...     print('電話:', student['tel'])
    ... 
    學號: 1001.0
    姓名: 駱昊
    電話: 13566778899
    學號: 1002.0
    姓名: 王大錘
    電話: 13012345678
    學號: 1003.0
    姓名: 白元芳
    電話: 13022223333
    >>> db.students.find().count()
    3
    >>> db.students.remove()
    {'n': 3, 'ok': 1.0}
    >>> db.students.find().count()
    0
    >>> from pymongo import ASCENDING
    >>>
    >>> coll = db.students
    >>> coll.create_index([('name', ASCENDING)], unique=True)
    'name_1'
    >>> coll.insert_one({'stuid': int(1001), 'name': '駱昊', 'gender': True})
    <pymongo.results.InsertOneResult object at 0x1050cc6c8>
    >>> coll.insert_many([{'stuid': int(1002), 'name': '王大錘', 'gender': False}, {'stuid': int(1003), 'name': '白元芳', 'gender': True}])
    <pymongo.results.InsertManyResult object at 0x1050cc8c8>
    >>> for student in coll.find({'gender': True}):
    ...     print('學號:', student['stuid'])
    ...     print('姓名:', student['name'])
    ...     print('性別:', '男' if student['gender'] else '女')
    ... 
    學號: 1001
    姓名: 駱昊
    性別: 男
    學號: 1003
    姓名: 白元芳
    性別: 男
關於pymongo更多的知識可以通過它的官方文檔進行了解，也可以使用MongoEngine這樣的庫來簡化Python程序對MongoDB的操作，除此之外，還有以異步I/O方式訪問MongoDB的三方庫motor都是不錯的選擇。