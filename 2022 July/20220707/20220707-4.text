使用模板
上面通過拼接HTML代碼的方式為瀏覽器生成動態內容的做法在實際開發中是無能接受的，因為實際項目中的前端頁面可能非常複雜，無法用這種拼接動態內容的方式來完成，這一點大家一定能夠想到。為了解決這個問題，我們可以提前準備一個模板頁（MTV中的T），所謂模板頁就是一個帶佔位符和模板指令的HTML頁面。

Django框架中有一個名為render的便捷函數可以來完成渲染模板的操作。所謂的渲染就是用數據替換掉模板頁中的模板指令和占位符，當然這裡的渲染稱為後端渲染，即在服務器端完成頁面的渲染再輸出到瀏覽器中。後端渲染的做法在Web應用的訪問量較大時，會讓服務器承受較大的負擔，所以越來越多的Web應用會選擇前端渲染的方式，即服務器只提供頁面所需的數據（通常是JSON格式），在瀏覽器中通過JavaScript代碼獲取這些數據並渲染頁面上。關於前端渲染的內容，我們會在後續的課程中為大家講解，目前我們使用的是通過模板頁進行後端渲染的做法，具體步驟如下所示。

使用模板頁的步驟如下所示。

1.在項目目錄下創建名為templates文件夾。

2.添加模板頁index.html。
#說明：實際項目開發中，靜態頁由前端開發者提供，後端開發者需要將靜態頁修改為模板頁，以便通過Python程序對其進行渲染，這種做法就是上面提到的後端渲染。
    <!DOCTYPE html>
    <html lang="en">
        <head>
            <meta charset="UTF-8">
            <title>首頁</title>
            <style>
                #fruits {
                    font-size: 1.25em;
                }
            </style>
        </head>
        <body>
            <h1>今天推薦的水果是：</h1>
            <hr>
            <ul id="fruits">
                {% for fruit in fruits %}
                <li>{{ fruit }}</li>
                {% endfor %}
            </ul>
        </body>
    </html>
在上面的模板頁中我們使用了{{ fruit }}這樣的模板佔位符語法，也使用了{% for %}這樣的模板指令，這些都是Django模板語言（DTL）的一部分。關於模板語法和指令，大家可以看看官方文檔，相信這些內容還是很容易理解的，並不需要過多的贅述，大家也可以參考官方文檔了解模板指令和語法。

3.修改views.py文件，調用render函數渲染模板頁。
    from random import sample

    from django.shortcuts import render


    def show_index(request):
        fruits = [
            'Apple', 'Orange', 'Pitaya', 'Durian', 'Waxberry', 'Blueberry',
            'Grape', 'Peach', 'Pear', 'Banana', 'Watermelon', 'Mango'
        ]
        selected_fruits = sample(fruits, 3)
        return render(request, 'index.html', {'fruits': selected_fruits})
render函數的第一個參數是請求對象request，第二個參數是我們要渲染的模板頁的名字，第三個參數是要渲染到頁面上的數據，我們通過一個字典將數據交給模板頁，字典中的鍵就是模板頁中使用的模板指令或占位符中的變量名。

4.到此為止，視圖函數中的render還無法找到模板文件index.html，需要修改settings.py文件，配置模板文件所在的路徑。修改settings.py文件，找到TEMPLATES配置，修改其中的DIRS配置。
    TEMPLATES = [
        {
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [os.path.join(BASE_DIR, 'templates'), ],
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [
                    'django.template.context_processors.debug',
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                ],
            },
        },
    ]

5.重新運行項目或直接刷新頁面查看結果。

總結
至此，我們已經利用Django框架完成了一個非常小的Web應用，雖然它並沒有任何的實際價值，但是可以通過這個項目對Django框架有一個感性的認識。學習Django最好的資料肯定是它的官方文檔，官方文檔提供了對多國語言的支持，而且有新手教程引導初學者學習使用Django框架，建議大家通過閱讀Django的官方文檔來學習和使用這個框架。當然圖靈社區出版的《Django基礎教程》也是非常適合初學者的入門級讀物，有興趣的讀者可以點擊鏈接進行購買。